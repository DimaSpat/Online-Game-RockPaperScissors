#!/usr/bin/env node

/**
 * Module dependencies.
 */

var { app, sessionMiddleware } = require("../app");
var debug = require("debug")("rockpapersisors:server");
var http = require("http");
var config = require("../config");
var mongoose = require("mongoose");
var userController = require("../controllers/user-controller");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.get("port"));
app.set("port", port);

console.log(`The url is: http://localhost:${port}/`);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require("socket.io")(server);

io.use(function (socket, next) {
  sessionMiddleware(socket.request, {}, next);
});

const rooms = {};
const waitingQueue = [];
const index = [];

function idCreator(length) {
  var result = "";
  var characters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  var characterLimit = characters.length;
  for (var i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * characterLimit));
  }
  return result;
}

function declareWinner(roomUniqueId, gameEnd) {
  let p1Choice = rooms[roomUniqueId].p1Choice;
  let p2Choice = rooms[roomUniqueId].p2Choice;
  let winner;

  if (!gameEnd) {
    if (p1Choice === p2Choice) {
      winner = "draw";
    } else if (p1Choice === "Paper") {
      winner = p2Choice === "Scissors" ? "player 2" : "player 1";
    } else if (p1Choice === "Rock") {
      winner = p2Choice === "Paper" ? "player 2" : "player 1";
    } else if (p1Choice === "Scissors") {
      winner = p2Choice === "Rock" ? "player 2" : "player 1";
    }

    io.sockets.to(roomUniqueId).emit("result", {
      winner: winner,
      isRound: !gameEnd,
    });

    // Reset choices for the room
    rooms[roomUniqueId].p1Choice = null;
    rooms[roomUniqueId].p2Choice = null;
  }
}

io.on("connection", function (socket) {
  socket.emit("savingInitStats", { login: socket.request.session.user.name });

  socket.on("createGame", () => {
    const roomUniqueId = idCreator(6);
    rooms[roomUniqueId] = {};
    socket.join(roomUniqueId);
    socket.emit("newGame", { roomUniqueId: roomUniqueId });
  });

  socket.on("joinGame", (data) => {
    if (rooms[data.roomUniqueId] != null) {
      socket.join(data.roomUniqueId);
      io.to(data.roomUniqueId).emit("playersConnected");
    }
  });

  socket.on("onlineGame", () => {
    if (waitingQueue.length > 0) {
      const opponentSocket = waitingQueue.shift();
      const roomUniqueId = idCreator(6);
      rooms[roomUniqueId] = {};
      socket.join(roomUniqueId);
      opponentSocket.join(roomUniqueId);
      socket.emit("newGame", {
        roomUniqueId: roomUniqueId,
        isFirstPlayer: false,
      });
      opponentSocket.emit("newGame", {
        roomUniqueId: roomUniqueId,
        isFirstPlayer: true,
      });
      io.to(roomUniqueId).emit("playersConnected");
    } else {
      waitingQueue.push(socket);
      socket.emit("waitingForOpponent");
    }
  });

  socket.on("cancelWaiting", () => {
    const index = waitingQueue.indexOf(socket);
    if (index !== -1) {
      waitingQueue.splice(index, 1);
    }
  });

  socket.on("p1Choice", function (data) {
    rooms[data.roomUniqueId].p1Choice = data.rpsValue;
    io.to(data.roomUniqueId).emit("p1Choice", { rpsValue: data.rpsValue });
    if (rooms[data.roomUniqueId].p2Choice != null) {
      declareWinner(data.roomUniqueId);
    }
  });

  socket.on("p2Choice", function (data) {
    rooms[data.roomUniqueId].p2Choice = data.rpsValue;
    io.to(data.roomUniqueId).emit("p2Choice", { rpsValue: data.rpsValue });
    if (rooms[data.roomUniqueId].p1Choice != null) {
      declareWinner(data.roomUniqueId);
    }
  });

  socket.on("roundOver", function (data) {
    io.to(data.roomUniqueId).emit("nextRound");
  });

  socket.on("gameOver", function (data) {
    userController.updateUserStats(
      socket,
      data.login,
      data.gameEnd,
      data.isWinner
    ); 
  });

  socket.on("playAgain", function (data) {
    const roomUniqueId = data.roomUniqueId;
    const playAgain = data.playAgain;

    if (playAgain) {
      if (rooms[roomUniqueId]) {
        rooms[roomUniqueId].p1Choice = null;
        rooms[roomUniqueId].p2Choice = null;
        io.to(roomUniqueId).emit("newGame", { roomUniqueId: roomUniqueId });
      }
    } else {
      if (rooms[roomUniqueId]) {
        io.to(roomUniqueId).emit("getBack");
        delete rooms[data.roomUniqueId];
      }
    }
  });

  socket.on("disconnect", function () {
    const rooms = Array.from(socket.rooms).filter((room) => room !== socket.id);
    rooms.forEach((room) => {
      socket.to(room).emit("playerDisconnected", { id: socket.id });
      delete rooms[room];
    });

    const index = waitingQueue.indexOf(socket);
    if (index !== -1) waitingQueue.splice(index, 1);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

async function main() {
  await mongoose.connect(config.get("mongodb"));
  console.log("Connected successfully to the server");

  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
}

main().catch((error) => console.log(error));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
